<?php

namespace cymapgt\core\utility\console;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-21 at 19:29:47.
 */
class ConsoleManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ConsoleManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::help
     */
    public function testHelp() {
        //test array is returned
        $serviceName = 'demoapi';
        $methodUsageArray = ConsoleManager::help($serviceName);
        $this->assertEquals(
            true,
            (isset (
                $methodUsageArray['bnToName']
            ) &&
            isset(
                $methodUsageArray['nameToBn']
            ))
        );
        
        //test that with method, filtered array is returned
        $methodName = 'nameToBn';
        $helpVerbosity = 1;
        $methodUsageArrayFiltered = ConsoleManager::help($serviceName, $helpVerbosity, $methodName);
        $this->assertEquals(
            true,
            (!(isset (
                $methodUsageArrayFiltered['bnToName']
            )) &&
            isset(
                $methodUsageArrayFiltered['nameToBn']
            ))
        );        
    }
    
    /**
     * @covers cymapgt\core\utility'\console\ConsoleManager::help
     */
    public function testHelpException() {
        //test that exception returned with unknown servicename
        $serviceName = 'notdemoapi';
        $this->setExpectedException(
            'cymapgt\Exception\NetConsoleException',
            "The servicename $serviceName is not registered in netconsole. Cant load help"
        );
        ConsoleManager::help($serviceName);
        
        //test that exception is returned with unknown method name
        $serviceNameReal = 'demoapi';
        $methodName = 'fakeMethodName';
        $helpVerbosity = 1;
        $this->setExpectedException(
            'cymapgt\Exception\NetConsoleException',
            "The method name $methodName is not a member of $serviceNameReal netconsole interface"
        );
        ConsoleManager::help($serviceName, $helpVerbosity, $methodName);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::add
     */
    public function testAdd() {
        //Test sticky service exception
        $serviceName = 'remove';
        $serviceNamespace = 'cymapgt\core\utility\console\DemoApi';
        $this->setExpectedException (
            'cymapgt\Exception\NetConsoleException',
            'You cannot register a sticky service name or the namespace cymapgt\core\utility\console\ConsoleManager'
        );
        ConsoleManager::add($serviceName, $serviceNamespace);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::remove
     */
    public function testRemove() {
        //Test sticky service exception
        $serviceName = 'remove';
        $this->setExpectedException (
            'cymapgt\Exception\NetConsoleException',
            'You cannot remove a sticky service name'
        );
        ConsoleManager::remove($serviceName);
        
        //Test sticky service exception
        $serviceNameFake = 'demonstrationapi';
        $this->setExpectedException (
            'cymapgt\Exception\NetConsoleException',
            "The service $serviceNameFake was not found in the config file. Cannot remove"
        );
        ConsoleManager::remove($serviceNameFake);        
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::replace
     */
    public function testReplace() {
        //Test sticky service exception
        $serviceName = 'add';
        $serviceNamespace = 'cymapgt\core\utility\console\DemoApi';
        $this->setExpectedException (
            'cymapgt\Exception\NetConsoleException',
            'You cannot perform replace operation on a sticky service name'
        );
        ConsoleManager::replace($serviceName, $serviceNamespace);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::route
     */
    public function testRoute() {
        $serviceName = 'demoapi';
        $serviceCommands = array (
            0 => $serviceName,
            1 => 'bnToName',
            2 => 'Panthera',
            3 => 'pardus'
        );
        
        $this->assertEquals(true, ConsoleManager::route($serviceName, $serviceCommands));
    }
    
    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::route
     */
    public function testRouteException() {
        $serviceNameFake = 'demonstrationapi';
        $serviceCommands = array (
            0 => $serviceNameFake    
        );
        $this->setExpectedException(
            'cymapgt\Exception\NetConsoleException',
            'The service you have called is not registered on the netconsole API'
        );
        ConsoleManager::route($serviceNameFake, $serviceCommands);
        
        $serviceName = 'demoapi';
        $serviceCommands[0] = $serviceName;
        $this->setExpectedException(
            'cymapgt\Exception\NetConsoleException',
            'At least one service command should be provided along with the service name'
        );
        ConsoleManager::route($serviceName, $serviceCommands);
    }
}
