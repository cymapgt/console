<?php

namespace cymapgt\core\utility\console;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-21 at 19:29:47.
 */
class ConsoleManagerTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var ConsoleManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::help
     */
    public function testHelp() {
        //test array is returned
        $serviceName = 'demoapi';
        $methodUsageArray = ConsoleManager::help($serviceName);
        $this->assertEquals(
            true,
            (isset (
                $methodUsageArray['bnToName']
            ) &&
            isset(
                $methodUsageArray['nameToBn']
            ))
        );
        
        //test that with method, filtered array is returned
        $methodName = 'nameToBn';
        $helpVerbosity = 1;
        $methodUsageArrayFiltered = ConsoleManager::help($serviceName, $helpVerbosity, $methodName);
        $this->assertEquals(
            true,
            (!(isset (
                $methodUsageArrayFiltered['bnToName']
            )) &&
            isset(
                $methodUsageArrayFiltered['nameToBn']
            ))
        );        
    }
    
    /**
     * @covers cymapgt\core\utility'\console\ConsoleManager::help
     * @expectedException \cymapgt\Exception\NetConsoleException
     */
    public function testHelpExceptionOnWrongService() {
        //test that exception returned with unknown servicename
        $serviceName = 'notdemoapi';
        ConsoleManager::help($serviceName);
    }
    
    /**
     * @covers cymapgt\core\utility'\console\ConsoleManager::help
     * @expectedException \cymapgt\Exception\NetConsoleException
     */
    public function testHelpExceptionOnWrongMember() {
        //test that exception is returned with unknown method name
        $serviceNameReal = 'demoapi';
        $methodName = 'fakeMethodName';
        $helpVerbosity = 1;
        ConsoleManager::help($serviceNameReal, $helpVerbosity, $methodName);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::add
     * @expectedException \cymapgt\Exception\NetConsoleException
     */
    public function testAdd() {
        //Test sticky service exception
        $serviceName = 'remove';
        $serviceNamespace = 'cymapgt\core\utility\console\DemoApi';
        ConsoleManager::add($serviceName, $serviceNamespace);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::remove
     * @expectedException \cymapgt\Exception\NetConsoleException
     * @expectedExceptionMessage You cannot remove a sticky service name
     */
    public function testRemoveSticky() {
        //Test sticky service exception
        $serviceName = 'remove';
        ConsoleManager::remove($serviceName);
    }
    
    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::replace
     * @expectedException \cymapgt\Exception\NetConsoleException
     * @expectedExceptionMessage You cannot perform replace operation on a sticky service name
     */
    public function testReplaceSticky() {
        //Test sticky service exception
        $serviceName = 'add';
        $serviceNamespace = 'cymapgt\core\utility\console\DemoApi';
        ConsoleManager::replace($serviceName, $serviceNamespace);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::route
     */
    public function testRoute() {
        $serviceName = 'demoapi';
        $serviceCommands = array (
            0 => $serviceName,
            1 => 'bnToName',
            2 => 'Panthera',
            3 => 'pardus'
        );
        
        $this->assertEquals(true, ConsoleManager::route($serviceName, $serviceCommands));
    }
   
    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::route
     * @expectedException \cymapgt\Exception\NetConsoleException
     * @expectedExceptionMessage The service you have called is not registered on the netconsole API
     */
    public function testRouteExceptionUnregisteredRoute() {
        $serviceNameFake = 'demonstrationapi';
        $serviceCommands = array (
            0 => $serviceNameFake    
        );
        ConsoleManager::route($serviceNameFake, $serviceCommands);
    }

    /**
     * @covers cymapgt\core\utility\console\ConsoleManager::route
     * @expectedException \cymapgt\Exception\NetConsoleException
     * @expectedExceptionMessage At least one service command should be provided along with the service name
     */    
    public function testRouteExceptionNoServiceProvided() {
        $serviceName = 'demoapi';
        $serviceCommands[0] = $serviceName;
        ConsoleManager::route($serviceName, $serviceCommands);
    } 
}
